# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12XOwzbB4RUwSdmH8yTGHLbtqqaazgzlN
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 2.x

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import os
import pandas as pd
import numpy as np
import cv2
from keras.utils import np_utils
from keras.models import Sequential,Model
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D,Activation,MaxPooling2D
from keras.utils import normalize
from keras.layers import Concatenate
from keras import Input
from keras.callbacks import ModelCheckpoint
from sklearn.model_selection import train_test_split

from google.colab import drive
drive.mount('/content/gdrive')

os.environ['KAGGLE_CONFIG_DIR'] = "/content/gdrive/MyDrive/Kaggle"

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/MyDrive/Kaggle

# Commented out IPython magic to ensure Python compatibility.
# %ls

!kaggle datasets download -d tawsifurrahman/covid19-radiography-database

!unzip \*.zip  && rm *.zip

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/MyDrive/Kaggle/COVID-19_Radiography_Dataset

categories = ['Normal', 'COVID']
labels = [0, 1]
dictionnaire = {'Normal': 0, 'COVID': 1}

img_size=100
data=[]
target=[]


for category in categories:
    folder_path=category
    img_names=os.listdir(folder_path)
        
    for img_name in img_names:
        img_path=os.path.join(folder_path,img_name)
        img=cv2.imread(img_path)

        try:
            gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)     
            resized=cv2.resize(gray,(img_size,img_size))
            data.append(resized)
            print("data size in ",category," is : ",len(data))
            target.append(dictionnaire[category])

        except Exception as e:
            print('Exception:',e)

data=np.array(data)/255.0
data=np.reshape(data,(data.shape[0],img_size,img_size,1))
target=np.array(target)
new_target=np_utils.to_categorical(target)

np.save('data',data)
np.save('target',new_target)

data=np.load('data.npy')
target=np.load('target.npy')

input_shape=data.shape[1:]
inp=Input(shape=input_shape)
convs=[]

parrallel_kernels=[3,5,7]

for k in range(len(parrallel_kernels)):

    conv = Conv2D(128, parrallel_kernels[k],padding='same',activation='relu',input_shape=input_shape,strides=1)(inp)
    convs.append(conv)

out = Concatenate()(convs)
conv_model = Model(inp,out)

model = Sequential()
model.add(conv_model)

model.add(Conv2D(64,(3,3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(32,(3,3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten())
model.add(Dropout(0.5))
model.add(Dense(128,activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(64,activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(2,input_dim=128,activation='softmax'))
model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])
#Informations sur le modele CNN
model.summary()

train_data,test_data,train_target,test_target=train_test_split(data,target,test_size=0.1)

from keras.models import load_model
model = load_model('/content/gdrive/MyDrive/Kaggle/COVID-19_Radiography_Dataset/model-003.model')

loss, acc = model.evaluate(test_data, test_target, verbose=2)
print("Untrained model, accuracy: {:5.2f}%".format(100 * acc))

model.save_weights('testmodelwieghts.model')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/MyDrive/Kaggle/COVID-19_Radiography_Dataset

checkpoint_filepath = '/Checkpoints'
model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(
    filepath=checkpoint_filepath,
    save_weights_only=True,
    monitor='val_accuracy',
    mode='max',
    save_best_only=True)

checkpoint = ModelCheckpoint('model-{epoch:03d}.model',monitor='val_loss',verbose=0,save_best_only=True,mode='auto')
history=model.fit(train_data,train_target,epochs=20,callbacks=[checkpoint,model_checkpoint_callback],validation_split=0.1)

"""gdfgdfg"""